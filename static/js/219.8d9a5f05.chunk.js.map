{"version":3,"file":"static/js/219.8d9a5f05.chunk.js","mappings":"8SAEMA,EAAU,mCAEhBC,EAAAA,GAAAA,SAAAA,QAAyB,gCAIlB,IAAMC,EAAmB,mCAAG,oGACVD,EAAAA,GAAAA,IAAU,qBAAsB,CAErDE,OAAQ,CACNC,KAAM,EACNC,QAASL,KALoB,cAC3BM,EAD2B,yBAQ1BA,EAASC,KAAKC,SARY,2CAAH,qDAWnBC,EAAmB,mCAAG,WAAOC,GAAP,4FAAoBN,EAApB,+BAA2B,EAA3B,SACVH,EAAAA,GAAAA,IAAU,eAAgB,CAC/CE,OAAQ,CACNC,KAAMA,EACNO,MAAOD,EACPL,QAASL,KALoB,cAC3BM,EAD2B,yBAQ1BA,EAASC,KAAKC,SARY,2CAAH,sDAWnBI,EAAmB,mCAAG,WAAMC,GAAN,uFACVZ,EAAAA,GAAAA,IAAA,gBAAmBY,GAAW,CACnDV,OAAQ,CACNE,QAASL,KAHoB,cAC3BM,EAD2B,yBAM1BA,EAASC,MANiB,2CAAH,sDASnBO,EAAe,mCAAG,WAAMD,GAAN,uFACNZ,EAAAA,GAAAA,IAAA,gBAAmBY,EAAnB,YAAsC,CAC3DV,OAAQ,CACNE,QAASL,KAHgB,cACvBM,EADuB,yBAMtBA,EAASC,KAAKQ,MANQ,2CAAH,sDASfC,EAAkB,mCAAG,WAAMH,GAAN,uFACTZ,EAAAA,GAAAA,IAAA,gBAAmBY,EAAnB,YAAsC,CAC3DV,OAAQ,CACNE,QAASL,KAHmB,cAC1BM,EAD0B,yBAMzBA,EAASC,KAAKC,SANW,2CAAH,qD,gKC9ClBS,EAASC,EAAAA,GAAAA,IAAH,yGAONC,EAAWD,EAAAA,GAAAA,GAAH,4HAQRE,EAAWF,EAAAA,GAAAA,GAAH,8GASRG,EAAYH,EAAAA,GAAAA,EAAH,qE,SCgCtB,EArDa,WACX,OAAkCI,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQb,GAAYc,EAAAA,EAAAA,MAAZd,SAERe,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEIf,EAAAA,EAAAA,IAAgBD,GAFpB,OAEbiB,EAFa,OAGnBN,EAAaM,GACbJ,EACsB,IAApBI,EAASC,OACL,4CACA,MAPa,gDAUnBL,EAAS,6CAVU,yDAAH,qDAapBG,GACD,GAAE,CAAChB,IAIJ,OACE,UAACI,EAAD,WACGQ,IAAS,uBAAIA,IACbF,EAAUQ,OAAS,IAClB,SAACZ,EAAD,UACGI,EAAUS,KACT,YAA2D,IAAxDC,EAAuD,EAAvDA,GAAIC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACxC,OACE,UAACjB,EAAD,YACE,gBACEkB,IACEJ,EAbH,mCAckBA,EACX,uCAENK,IAAKJ,KAEP,SAACd,EAAD,UAAYe,KACZ,uCAAeC,OAVFJ,EAalB,QAMZ,C","sources":["api.js","components/Cast/Cast.styled.js","components/Cast/Cast.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'a97f5a48286213b4292b81d1cb5cf0d2';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// export const controller = new AbortController();\n\nexport const searchPopularMovies = async () => {\n  const response = await axios.get('trending/movie/day', {\n    // signal: controller.signal,\n    params: {\n      page: 1,\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const searchMoviesByQuery = async (searchQuery, page = 1) => {\n  const response = await axios.get('search/movie', {\n    params: {\n      page: page,\n      query: searchQuery,\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const searchMoviesDetails = async movieId => {\n  const response = await axios.get(`movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const searchMovieCast = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.cast;\n};\n\nexport const searchMovieReviews = async movieId => {\n  const response = await axios.get(`movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const Layout = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 20px 20px;\n`;\n\nexport const CastList = styled.ul`\n  padding: 0 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  list-style: disc;\n`;\n\nexport const CastItem = styled.li`\n  padding: 5px 5px;\n\n  & > img {\n    width: 150px;\n    margin-bottom: 12px;\n  }\n`;\n\nexport const ActorName = styled.p`\n  margin-bottom: 12px;\n  font-weight: 500;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { searchMovieCast } from 'api';\nimport { Layout, CastList, CastItem, ActorName } from './Cast.styled';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        const filmCast = await searchMovieCast(movieId);\n        setMovieCast(filmCast);\n        setError(\n          filmCast.length === 0\n            ? \"We didn't find any actors for this movie.\"\n            : null\n        );\n      } catch (e) {\n        setError(\"We didn't find any actors for this movie.\");\n      }\n    };\n    fetchMovieCast();\n  }, [movieId]);\n\n  const imageUrl = 'https://image.tmdb.org/t/p/w500/';\n\n  return (\n    <Layout>\n      {error && <p>{error}</p>}\n      {movieCast.length > 0 && (\n        <CastList>\n          {movieCast.map(\n            ({ id, profile_path, original_name, name, character }) => {\n              return (\n                <CastItem key={id}>\n                  <img\n                    src={\n                      profile_path\n                        ? imageUrl + profile_path\n                        : 'https://i.postimg.cc/NF6QdzcX/no.jpg'\n                    }\n                    alt={original_name}\n                  />\n                  <ActorName>{name}</ActorName>\n                  <p>Character: {character}</p>\n                </CastItem>\n              );\n            }\n          )}\n        </CastList>\n      )}\n    </Layout>\n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY","axios","searchPopularMovies","params","page","api_key","response","data","results","searchMoviesByQuery","searchQuery","query","searchMoviesDetails","movieId","searchMovieCast","cast","searchMovieReviews","Layout","styled","CastList","CastItem","ActorName","useState","movieCast","setMovieCast","error","setError","useParams","useEffect","fetchMovieCast","filmCast","length","map","id","profile_path","original_name","name","character","src","alt"],"sourceRoot":""}