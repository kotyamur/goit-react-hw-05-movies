{"version":3,"file":"static/js/219.216852d1.chunk.js","mappings":"mOAEaA,EAASC,EAAAA,GAAAA,IAAH,yGAONC,EAAWD,EAAAA,GAAAA,GAAH,4HAQRE,EAAWF,EAAAA,GAAAA,GAAH,8GASRG,EAAYH,EAAAA,GAAAA,EAAH,qE,2BCStB,EA9Ba,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA2BE,EAAAA,EAAAA,GAAW,kBAAmBF,GAAzD,eAAOG,EAAP,KAAkBC,EAAlB,KAEA,OACE,UAACT,EAAD,WACGS,IAAS,uBAAIA,IACS,KAAb,OAATD,QAAS,IAATA,OAAA,EAAAA,EAAWE,UACV,sEAEQ,OAATF,QAAS,IAATA,OAAA,EAAAA,EAAWE,QAAS,IACnB,SAACR,EAAD,UACGM,EAAUG,KACT,YAA2D,IAAxDC,EAAuD,EAAvDA,GAAIC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACxC,OACE,UAACb,EAAD,YACE,gBAAKc,KAAKC,EAAAA,EAAAA,GAAYL,GAAeM,IAAKL,KAC1C,SAACV,EAAD,UAAYW,KACZ,uCAAeC,OAHFJ,EAMlB,QAMZ,C,uUC/BKQ,EAAU,mCAEhBC,EAAAA,GAAAA,SAAAA,QAAyB,gCAIlB,IAAMC,EAAmB,mCAAG,oGACVD,EAAAA,GAAAA,IAAU,qBAAsB,CAErDE,OAAQ,CACNC,KAAM,EACNC,QAASL,KALoB,cAC3BM,EAD2B,yBAQ1BA,EAASC,KAAKC,SARY,2CAAH,qDAWnBC,EAAmB,mCAAG,WAAOC,GAAP,4FAAoBN,EAApB,+BAA2B,EAA3B,SACVH,EAAAA,GAAAA,IAAU,eAAgB,CAC/CE,OAAQ,CACNC,KAAMA,EACNO,MAAOD,EACPL,QAASL,KALoB,cAC3BM,EAD2B,yBAQ1BA,EAASC,KAAKC,SARY,2CAAH,sDAWnBI,EAAmB,mCAAG,WAAM3B,GAAN,uFACVgB,EAAAA,GAAAA,IAAA,gBAAmBhB,GAAW,CACnDkB,OAAQ,CACNE,QAASL,KAHoB,cAC3BM,EAD2B,yBAM1BA,EAASC,MANiB,2CAAH,sDASnBM,EAAe,mCAAG,WAAM5B,GAAN,uFACNgB,EAAAA,GAAAA,IAAA,gBAAmBhB,EAAnB,YAAsC,CAC3DkB,OAAQ,CACNE,QAASL,KAHgB,cACvBM,EADuB,yBAMtBA,EAASC,KAAKO,MANQ,2CAAH,sDASfC,EAAkB,mCAAG,WAAM9B,GAAN,uFACTgB,EAAAA,GAAAA,IAAA,gBAAmBhB,EAAnB,YAAsC,CAC3DkB,OAAQ,CACNE,QAASL,KAHmB,cAC1BM,EAD0B,yBAMzBA,EAASC,KAAKC,SANW,2CAAH,sD,SC7ClBrB,EAAa,SAAC6B,EAAUC,GACnC,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOX,EAAP,KAAaY,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAO7B,EAAP,KAAc+B,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,iFACF,KAAVP,EADY,wDAIhBK,GAAa,GAJG,cAMdH,EANc,SAMAM,EAAIT,GAAUC,GANd,oFAQdG,EAAS,wDARK,yBAUdE,GAAa,GAVC,6EAAH,qDAcfE,GACD,GAAE,CAACR,EAAUC,IAEP,CAACV,EAAMlB,EAAOgC,EACtB,C,sDC3BM,IAAMvB,EAAc,SAAA4B,GAEzB,OAAOA,EADU,mCACQA,EAAO,6CACjC,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","api.js","hooks/useRequest.js","utils.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Layout = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 20px 20px;\n`;\n\nexport const CastList = styled.ul`\n  padding: 0 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  list-style: disc;\n`;\n\nexport const CastItem = styled.li`\n  padding: 5px 5px;\n\n  & > img {\n    width: 150px;\n    margin-bottom: 12px;\n  }\n`;\n\nexport const ActorName = styled.p`\n  margin-bottom: 12px;\n  font-weight: 500;\n`;\n","import { useParams } from 'react-router-dom';\nimport { Layout, CastList, CastItem, ActorName } from './Cast.styled';\nimport { useRequest } from 'hooks/useRequest';\nimport { generateUrl } from 'utils';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [movieCast, error] = useRequest('searchMovieCast', movieId);\n\n  return (\n    <Layout>\n      {error && <p>{error}</p>}\n      {movieCast?.length === 0 && (\n        <p>We didn't find any actors for this movie.</p>\n      )}\n      {movieCast?.length > 0 && (\n        <CastList>\n          {movieCast.map(\n            ({ id, profile_path, original_name, name, character }) => {\n              return (\n                <CastItem key={id}>\n                  <img src={generateUrl(profile_path)} alt={original_name} />\n                  <ActorName>{name}</ActorName>\n                  <p>Character: {character}</p>\n                </CastItem>\n              );\n            }\n          )}\n        </CastList>\n      )}\n    </Layout>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'a97f5a48286213b4292b81d1cb5cf0d2';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// export const controller = new AbortController();\n\nexport const searchPopularMovies = async () => {\n  const response = await axios.get('trending/movie/day', {\n    // signal: controller.signal,\n    params: {\n      page: 1,\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const searchMoviesByQuery = async (searchQuery, page = 1) => {\n  const response = await axios.get('search/movie', {\n    params: {\n      page: page,\n      query: searchQuery,\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const searchMoviesDetails = async movieId => {\n  const response = await axios.get(`movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const searchMovieCast = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.cast;\n};\n\nexport const searchMovieReviews = async movieId => {\n  const response = await axios.get(`movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n","import * as api from 'api';\nimport { useState, useEffect } from 'react';\n\nexport const useRequest = (funcName, param) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchInfo = async () => {\n      if (param === '') {\n        return;\n      }\n      setIsLoading(true);\n      try {\n        setData(await api[funcName](param));\n      } catch (e) {\n        setError('Sorry, something went wrong. Please try again later.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchInfo();\n  }, [funcName, param]);\n\n  return [data, error, isLoading];\n};\n","export const generateUrl = path => {\n  const imageUrl = 'https://image.tmdb.org/t/p/w500/';\n  return path ? imageUrl + path : 'https://i.postimg.cc/L8fCW6RZ/repetajpg.jpg';\n};\n"],"names":["Layout","styled","CastList","CastItem","ActorName","movieId","useParams","useRequest","movieCast","error","length","map","id","profile_path","original_name","name","character","src","generateUrl","alt","API_KEY","axios","searchPopularMovies","params","page","api_key","response","data","results","searchMoviesByQuery","searchQuery","query","searchMoviesDetails","searchMovieCast","cast","searchMovieReviews","funcName","param","useState","setData","setError","isLoading","setIsLoading","useEffect","fetchInfo","api","path"],"sourceRoot":""}